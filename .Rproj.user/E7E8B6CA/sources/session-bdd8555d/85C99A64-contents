---
title: "hw-5-networks"
author: "Anna Fetter"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Homework 5: Network analysis
In this assignment, you will perform a hypothetical consulting project on water system interconnections. Physical interconnections allow water systems to transfer water from one to another subject to specific agreed upon terms. Though many systems in North Carolina are interconnected, the majority are not. You have been contracted by NC Department of Environmental Quality to consult on the broader interconnection context in North Carolina and how to do address a couple of specific situations that have arisen.
A pdf of the report should be uploaded to Canvas, and should include a link to your code on Github (repository can be public or private; if private, add me as a collaborator - my github username is arelkhattabi). Feel free to use Quarto, Markdown, Canva, or any other software to create your report.
You should describe your findings in a well-written report to NC Department of Environmental Quality (complete sentences, please ðŸ™‚). 

## Load in data & packages
```{r}
#load packages
library(tidyverse)
library(sf)
library(tidygraph)
library(igraph)
library(tibble)
library(ggplot2)
library(units)
library(tmap)
library(osmdata)
library(nabor)
library(ggspatial)
library(rosm)
library(prettymapr)
library(tidycensus)

connected_points <- st_read("network_data/connected_points.gpkg")
unconnected_points <- st_read("network_data/unconnected_points.gpkg")
network <- st_read("network_data/network.gpkg")
network <- st_make_valid(network)
```


## Question 1
Make a map showing the water systems that are interconnected, water systems that are not connected, and the network of interconnections [1 point].

```{r}
# Get water features for NC
nc_water <- opq(bbox = c(-84.3219, 33.8423, -75.4606, 36.5880)) %>%
  add_osm_feature(key = 'water') %>%  # Fetch water features
  osmdata_sf()

# Extract just the water & name column
nc_water_features <- nc_water$osm_polygons %>% 
  select(name, water)

#further analysis showed this data was just from Central NC, around the Triangle, so sticking with that scope
```

```{r}
# Define the bounding box for the Triangle region
triangle_bbox <- st_bbox(c(xmin = -80.4, ymin = 35.5, xmax = -78.4, ymax = 36.2), crs = st_crs(4326))

# Crop the water features to the Triangle bounding box
triangle_water_features <- st_crop(nc_water_features, triangle_bbox)

# Create the Triangle map
triangle_water_systems_map <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = -1) + 
  geom_sf(data = triangle_water_features, fill = "blue", alpha = 0.3) +
  geom_sf(data = network, aes(color = "Network"), size = 0.5) +
  geom_sf(data = connected_points, aes(color = "Connected Systems"), size = 1) +
  geom_sf(data = unconnected_points, aes(color = "Unconnected Systems"), size = 1, shape = 21, fill = "red") +
  scale_color_manual(
    name = "Legend",
    values = c("Network" = "blue", "Connected Systems" = "green", "Unconnected Systems" = "red")
  ) +
  labs(
    title = "Water Systems and Interconnections in the Triangle"
  ) +
  theme_minimal()

# Print the Triangle map
print(triangle_water_systems_map)
ggsave("plots/triangle_water_systems_map.png", plot = triangle_water_systems_map, width = 10, height = 8)
```

## Question 2
Transform the interconnections layer into a graph (network with nodes and edges). Map the network (nodes and edges) [2 point].
```{r}
# function from network analysis in class
sf_to_tidygraph = function(x, directed = TRUE) {
  
  edges <- x %>%
    mutate(edgeID = c(1:nrow(.)))  # Ensure edgeID is created correctly
  
  nodes <- edges %>%
    st_coordinates() %>%
    as_tibble() %>%
    rename(edgeID = L1) %>%
    group_by(edgeID) %>%
    slice(c(1, n())) %>%
    ungroup() %>%
    mutate(start_end = rep(c('start', 'end'), times = n()/2)) %>%
    mutate(xy = paste(.$X, .$Y)) %>% 
    mutate(nodeID = group_indices(., factor(xy, levels = unique(xy)))) %>%
    select(-xy)
  
  source_nodes <- nodes %>%
    filter(start_end == 'start') %>%
    pull(nodeID)
  target_nodes <- nodes %>%
    filter(start_end == 'end') %>%
    pull(nodeID)
  edges <- edges %>%
    mutate(from = source_nodes, to = target_nodes)
  
  nodes <- nodes %>%
    distinct(nodeID, .keep_all = TRUE) %>%
    select(-c(edgeID, start_end)) %>%
    st_as_sf(coords = c('X', 'Y')) %>%
    st_set_crs(st_crs(edges))
  
  # Ensure geometry is preserved in edges
  edges <- edges %>%
    as_tibble() %>%
    mutate(geometry = st_geometry(x))  # Add geometry column
  
  tbl_graph(nodes = nodes, edges = edges, directed = directed)
}
```


```{r}
# Convert the network to a tidygraph object
network_graph <- sf_to_tidygraph(network, directed = FALSE)

# Check the resulting graph
print(network_graph)
```

```{r}
#map the network graph
map_network_graph <- ggplot() +
  annotation_map_tile(type = "osm", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf()) + 
  geom_sf(data = network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf(), size = 0.5)

ggsave("plots/network_graph.png", plot = map_network_graph, width = 10, height = 8)
```


```{r}
tmap_mode('view')

tm_shape(network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf()) +
  tm_lines() +
tm_shape(network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf()) +
  tm_dots() +
tmap_options(basemaps = 'OpenStreetMap')
```
## Question 3
Compute degree centrality and between centrality measures for the interconnections network. Map your measures and interpret/discuss your findings. [2 point]
```{r}
# activate edges, mutate length into geometry
network_graph <- network_graph %>%
  activate(edges) %>%
  mutate(length = st_length(geometry))

#check edges
network_graph %>%
  activate(edges) %>%
  as_tibble() %>%
  head()
```

# SOMETHING IS WRONG HERE
```{r}
#centrality measures, "intersections that would matter the most"
# Make sure edge length is numeric
network_graph <- network_graph %>%
  activate(edges) %>%
  mutate(length = as.numeric(length))

# Compute centrality
network_graph <- network_graph %>%
  activate(nodes) %>%
  mutate(
    degree = centrality_degree(),
    betweenness = centrality_betweenness(weights = .E()$length)  # used edge lengths, as suggested by Chatgpt
  ) %>%
  activate(edges) %>%
  mutate(
    betweenness = centrality_edge_betweenness(weights = length)
  )

#Map degree centrality
map_degree_centrality <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'grey70') + 
  geom_sf(data = network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf(),
          aes(col = degree, size = degree)) +
  scale_colour_viridis_c(option = 'plasma') +
  scale_size_continuous(range = c(1, 5)) +
  labs(
    title = "Node Degree Centrality",
    subtitle = "Number of directly connected water systems"
  ) +
  theme_minimal()
print(map_degree_centrality)
ggsave("plots/node_degree_centrality.png", plot = map_degree_centrality, width = 10, height = 8)


# Map node centrality
map_node_centrality <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'grey50') + 
  geom_sf(data = network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf(),
          aes(col = betweenness, size = betweenness)) +
  scale_colour_viridis_c(option = 'inferno') +
  scale_size_continuous(range = c(0, 4)) +
  labs(title = "Node Betweenness Centrality (Weighted by Edge Length)")

print(map_node_centrality)
ggsave("plots/node_betweenness_centrality.png", plot = map_node_centrality, width = 10, height = 8)

#Map node
map_edge_betweenness <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(),
          aes(col = betweenness, size = betweenness)) +
  scale_colour_viridis_c(option = 'inferno') +
  scale_size_continuous(range = c(0, 4)) +
  labs(title = "Edge Betweenness Centrality")

print(map_edge_betweenness)
ggsave("plots/edge_betweenness_centrality.png", plot = map_edge_betweenness, width = 10, height = 8)

```

## Question 4
OWASA (the water system that serves Chapel Hill & Carrboro) needs to buy water. Cary has excess capacity that it is willing to sell. The cost of water depends on distance. Letâ€™s assume it costs What is the shortest path between Chapel Hill and Cary? What cities does the water need to pass through to get from Cary to Chapel Hill? Now assume, that OWASA is thinking of instead getting water from Raleigh. How far does water have to travel? What cities does the water have to go to? [2 points]
```{r}
## mapping shortest path from Chapel Hill to Cary, what cities does it pass through?
# used GitHub Copilot to help me find nodes closest to Chapel Hill and Cary
locations <- st_as_sf(data.frame(
  name = c("Chapel Hill", "Carrboro", "Cary"),
  lon = c(-79.0558, -79.0753, -78.7811),
  lat = c(35.9132, 35.9101, 35.7915)
), coords = c("lon", "lat"), crs = 4326)

# Ensure the nodes in network_graph have the same CRS
nodes_sf <- network_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  st_as_sf()

# Find the nearest nodes
nearest_nodes <- st_nearest_feature(locations, nodes_sf)

# Add the node IDs to the locations
locations$nodeID <- nearest_nodes

# View the results
print(locations)

# Define start and end nodes
ch_node <- 31  # Chapel Hill/Carrboro
cary_node <- 41    # Cary

# Compute the shortest path
path <- shortest_paths(
  graph = network_graph,
  from = cary_node,
  to = ch_node,
  output = 'both',
  weights = network_graph %>% activate(edges) %>% pull(length)
)

# Extract the path details
path$vpath  # Nodes in the shortest path
path$epath  # Edges in the shortest path
```

```{r}
# Create a subgraph for the shortest path
path_graph <- network_graph %>%
  subgraph.edges(eids = path$epath %>% unlist()) %>%
  as_tbl_graph()

# Visualize the shortest path
cary_ch_shortest_path <- ggplot() +
  annotation_map_tile(type = "osm", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'darkgrey') +
  geom_sf(data = network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf(), col = 'darkgrey', size = 0.5) +
  geom_sf(data = path_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), lwd = 1, col = 'firebrick') +
  geom_sf(data = path_graph %>% activate(nodes) %>% filter(nodeID %in% c(cary_node, ch_node)) %>% as_tibble() %>% st_as_sf(), size = 2)

ggsave("plots/cary_ch_shortest_path.png", plot = cary_ch_shortest_path, width = 10, height = 8)
```
NEED TO FIND NAMES OF LOCATIONS ON GRAPH, specifically 30 & 32
```{r}
# collect the names of locations on the path
path_nodes <- path_graph %>%
  activate(nodes) %>%
  as_tibble() %>%
  st_as_sf()

# Join by spatial equality (should match exactly since same network)
path_nodes_named <- st_join(
  path_nodes,
  connected_points,
  join = st_is_within_distance,
  dist = 10  # meters â€” you can increase this if needed
)

path_nodes_named %>%
  st_drop_geometry() %>%
  select(Name)

```
```{r}
#making a new graph, used ChatGPT to help with styling
cary_ch_shortest_path_labeled <- ggplot() +
  annotation_map_tile(type = "osm", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'grey70') +
  geom_sf(data = network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf(), col = 'grey40', size = 0.5) +
  geom_sf(data = path_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'firebrick', lwd = 1.2) +
  geom_sf(data = path_graph %>% activate(nodes) %>% filter(nodeID %in% c(cary_node, ch_node)) %>% as_tibble() %>% st_as_sf(), col = 'black', size = 2) +
  geom_sf_label(
    data = path_nodes_named %>% filter(!is.na(Name)),
    aes(label = Name),
    size = 3,
    fontface = "bold",
    label.size = 0.2,
    fill = "white",
    color = "black"
  ) +
  labs(
    title = "Shortest Path from Cary to Chapel Hill",
    subtitle = "Towns traversed along the route"
  ) 


ggsave("plots/cary_ch_shortest_path_labeled.png", plot = cary_ch_shortest_path_labeled, width = 10, height = 8)

```
## perfom the same analysis, but using Raleigh as the source instead of Cary
```{r}
# Used ChatGPT to recreate the analysis but for Raleigh, really only changed out variables, followed the same procedure
# Create Raleigh as a point
raleigh <- st_as_sf(data.frame(
  name = "Raleigh",
  lon = -78.6382,
  lat = 35.7796
), coords = c("lon", "lat"), crs = 4326)

# Find nearest node to Raleigh
raleigh_node <- st_nearest_feature(raleigh, nodes_sf)

# Define Chapel Hill node (keep as is)
ch_node <- 31  # Chapel Hill/Carrboro

# Compute shortest path
path_raleigh <- shortest_paths(
  graph = network_graph,
  from = raleigh_node,
  to = ch_node,
  output = 'both',
  weights = network_graph %>% activate(edges) %>% pull(length)
)

# Subgraph for shortest path
path_graph_raleigh <- network_graph %>%
  subgraph.edges(eids = path_raleigh$epath %>% unlist()) %>%
  as_tbl_graph()

# Extract nodes along the path
path_nodes_raleigh <- path_graph_raleigh %>%
  activate(nodes) %>%
  as_tibble() %>%
  st_as_sf()

# Match to original connected_points for names
path_labels_raleigh <- st_join(
  path_nodes_raleigh,
  connected_points,
  join = st_is_within_distance,
  dist = 10
) %>%
  filter(!is.na(Name))

raleigh_ch_shortest_path <- ggplot() +
  annotation_map_tile(type = "osm", zoomin = -1) +
  geom_sf(data = network_graph %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'grey70') +
  geom_sf(data = network_graph %>% activate(nodes) %>% as_tibble() %>% st_as_sf(), col = 'grey40', size = 0.5) +
  geom_sf(data = path_graph_raleigh %>% activate(edges) %>% as_tibble() %>% st_as_sf(), col = 'blue', lwd = 1.2) +
  geom_sf(data = path_graph_raleigh %>% activate(nodes) %>% filter(nodeID %in% c(raleigh_node, ch_node)) %>% as_tibble() %>% st_as_sf(), size = 2, col = 'black') +
  geom_sf_label(
    data = path_labels_raleigh,
    aes(label = Name),
    size = 3,
    fontface = "bold",
    label.size = 0.2,
    fill = "white",
    color = "black"
  ) +
  labs(
    title = "Shortest Path from Raleigh to Chapel Hill",
    subtitle = "Towns traversed along the route"
  )

# Save it
ggsave("plots/raleigh_ch_shortest_path_labeled.png", plot = raleigh_ch_shortest_path, width = 10, height = 8)

```

```{r}
# calculate distances

cary_ch_distance <- path_graph %>%
  activate(edges) %>%
  as_tibble() %>%
  summarise(length = sum(length))

raleigh_ch_distance <- path_graph_raleigh %>%
  activate(edges) %>%
  as_tibble() %>%
  summarise(length = sum(length))

print(cary_ch_distance)
print(raleigh_ch_distance)

```
## Question 5
The Town of Liberty is in trouble and needs to augment its water supply. One option it is considering is to connect to a system that is already interconnected. What are its options? Which is the closest option? What would some of the challenges for the Town of Liberty in implementing this option? [3 points]
```{r}
# Extract Liberty from unconnected points
liberty_point <- unconnected_points %>% filter(str_detect(Name, "Liberty"))

# Calculate distances from Liberty to all points in the connected network
liberty_network_distances <- st_distance(liberty_point, connected_points)

# Add distances as a column to the network dataset
network_with_distances <- connected_points %>%
  mutate(distance_to_liberty = as.numeric(liberty_network_distances))

# Find the 5 closest points in the network
liberty_closest_network_points <- network_with_distances %>%
  arrange(distance_to_liberty) %>%
  slice(1:5)

# now looking at closeness to other unconnected points
liberty_unconnected_distances <- st_distance(liberty_point, unconnected_points)

# Add distances as a column to the unconnected points dataset
liberty_unconnected_with_distances <- unconnected_points %>%
  mutate(distance_to_liberty = as.numeric(liberty_unconnected_distances))

# Exclude Liberty itself and find the 5 closest unconnected points
liberty_closest_unconnected_points <- liberty_unconnected_with_distances %>%
  filter(Name != "Liberty") %>%
  arrange(distance_to_liberty) %>%
  slice(1:5)

# Print the 5 closest unconnected points
print(liberty_closest_unconnected_points)
```

```{r}
# Visualize the connections for Liberty
ggplot() +
  # Add basemap
  annotation_map_tile(type = "osm", zoomin = -1) +

  # Plot the network edges (blue)
  geom_sf(data = network, col = "blue", size = 0.5, alpha = 0.7) +

  # Plot all unconnected points (grey)
  geom_sf(data = unconnected_points, col = "grey", size = 1, alpha = 0.5) +
  # Highlight 5 closest connected nodes (green)
  geom_sf(data = liberty_closest_network_points, col = "green", size = 3, shape = 21, fill = "green") +
  # Highlight 5 closest unconnected points (orange)
  geom_sf(data = liberty_closest_unconnected_points, col = "orange", size = 3, shape = 21, fill = "orange") +
  # Plot Liberty
  geom_sf(data = liberty_point, col = "red", size = 3, shape = 21, fill = "red") +
  # Add labels and legend via title/subtitle
  labs(
    title = "Closest Points to Liberty",
    subtitle = "Green: Closest Connected Nodes | Orange: Closest Unconnected Points | Red: Liberty",
    caption = "Based on spatial (straight-line) proximity."
  ) +
  theme_minimal()

ggsave("plots/liberty_closest_points.png", plot = last_plot(), width = 10, height = 8)
```
```{r}
# summary table of closest connections
# Build Liberty connections table with distances in miles
liberty_table <- liberty_closest_network_points %>%
  st_drop_geometry() %>%
  select(Name, distance_to_liberty) %>%
  mutate(`Distance (miles)` = round(distance_to_liberty / 1609.34, 2)) %>%
  select(`Town Name` = Name, `Distance (miles)`)
# Save it as PNG
png("plots/liberty_connections_table.png", width = 800, height = 400)
grid.table(liberty_table)
#dev.off()
```