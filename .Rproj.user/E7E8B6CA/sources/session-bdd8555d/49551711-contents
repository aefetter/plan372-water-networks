---
title: "hw-4-linear-regression"
author: "Anna Fetter"
date: "`r Sys.Date()`"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load in packages
```{r}
library(tidyverse)
library(sf)
library(tidycensus)
library(knitr)
library(broom)
library(kableExtra)
library(webshot2)
#removes scientific notation
options(scipen = 999)
```

### Load in dataset
```{r}
airport_pairs <- read_csv("airport_pairs.csv")
```

### Explore the dataset
```{r}
summary(airport_pairs)
```
## convert origin & destination cbsa character strings, this will avoid problems when joining with census api data later
```{r}
airport_pairs <- airport_pairs %>% 
  mutate(origin_cbsa = as.character(origin_cbsa),
         dest_cbsa = as.character(dest_cbsa))
```
## 1. Market saturation analysis
```{r}
rdu_flights <- airport_pairs %>% 
  filter(origin == "RDU" | dest == "RDU" ) %>% 
  filter(passengers >= 10000)
```

## 2. Bringing in census data
```{r}
# loading in census data, needed to use chatgpt to remember how to load in data & referenced open data class (3/4/2025)
cbsa_data <- get_acs(
  geography = "metropolitan statistical area/micropolitan statistical area",
  variables = "B01003_001", #code for total population
  #use 2022 since that's the year of the air traffic survey data
  year = 2022,
  survey = "acs5",
  cache_table = TRUE
) %>%
  select(cbsa = GEOID, population = estimate, metro_name = NAME)

# now making two copies, one for origin & one for destination
origin_cbsa_pop <- cbsa_data %>%
  rename(origin_cbsa = cbsa, origin_pop = population, origin_metro = metro_name)

dest_cbsa_pop <- cbsa_data %>%
  rename(dest_cbsa = cbsa, destination_pop = population, dest_metro = metro_name)


```

```{r}
#now join populations to airport pairs, need to do this twice to get both origin & destination pairs
rdu_flights_with_pop <- rdu_flights %>%
  left_join(origin_cbsa_pop, by = "origin_cbsa") %>%
  left_join(dest_cbsa_pop, by = "dest_cbsa")
```

```{r}
# group by CBSA pair (not individual airports), and sum passengers to make the metro areas show up as one, for my own taste I also added metro names
origin_dest_summary <- rdu_flights_with_pop %>%
  group_by(origin_cbsa, dest_cbsa) %>%
  summarize(
    total_passengers = sum(passengers, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  left_join(origin_cbsa_pop %>% select(origin_cbsa, origin_metro, origin_pop), by = "origin_cbsa") %>%
  left_join(dest_cbsa_pop %>% select(dest_cbsa, dest_metro, destination_pop), by = "dest_cbsa")
```

#### Scatterplots
```{r}
#origin population and total passengers (excludes rdu as origin, since this data is all flights coming in or out of raleigh)
originpop_vs_passengers_scatter <- origin_dest_summary %>%
  filter(origin_cbsa != "39580") %>%
  ggplot(aes(x = origin_pop, y = total_passengers)) +
  geom_point() +
  labs(x = "Origin Population", y = "Total Passengers") +
  ggtitle("Origin Population vs Total Passengers")

#destination population and total passengers (excludes rdu as a destination, since this data is all flights coming in or out of raleigh)
destpop_vs_passengers_scatter <- origin_dest_summary %>%
  filter(dest_cbsa != "39580") %>%
  ggplot(aes(x = destination_pop, y = total_passengers)) +
  geom_point() +
  labs(x = "Destination Population", y = "Total Passengers") +
  ggtitle("Destination Population vs Total Passengers")

# flight distance and total passengers
flight_dist_total_passengers <- rdu_flights %>% 
  ggplot(aes(x = distancemiles, y = passengers)) +
  geom_point() +
  labs(x = "Flight Distance (Miles)", y="Total Passengers") +
  ggtitle("Flight Distance vs Total Passengers")


originpop_vs_passengers_scatter
destpop_vs_passengers_scatter
flight_dist_total_passengers
```

There appears to be a positive correlation between origin population & number of passengers and destination poipulation & number of passengers. There does not seem to be a compelling correlation between flight distance and number of passengers.

## Extra credit: include a pair of scatterplots for another variable other than population, at the origin and destination [+1 point]
```{r}
# let's try median household income (this might be a proxy for the level of industry in a particular area) using the same steps
cbsa_income <- get_acs(
  geography = "metropolitan statistical area/micropolitan statistical area",
  variables = "B19013_001",  # Median household income
  year = 2022,
  survey = "acs5",
  cache_table = TRUE
) %>%
  select(cbsa = GEOID, income = estimate, metro_name = NAME)

origin_cbsa_income <- cbsa_income %>%
  rename(origin_cbsa = cbsa, origin_income = income, origin_metro = metro_name)

dest_cbsa_income <- cbsa_income %>%
  rename(dest_cbsa = cbsa, destination_income = income, dest_metro = metro_name)

rdu_flights_with_income <- rdu_flights %>%
  left_join(origin_cbsa_income, by = "origin_cbsa") %>%
  left_join(dest_cbsa_income, by = "dest_cbsa")

origin_dest_summary_income <- rdu_flights_with_income %>%
  group_by(origin_cbsa, dest_cbsa) %>%
  summarize(
    total_passengers = sum(passengers, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  left_join(origin_cbsa_income %>% select(origin_cbsa, origin_metro, origin_income), by = "origin_cbsa") %>%
  left_join(dest_cbsa_income %>% select(dest_cbsa, dest_metro, destination_income), by = "dest_cbsa")

originincome_vs_passengers_scatter <- origin_dest_summary_income %>%
  filter(origin_cbsa != "39580") %>%
  ggplot(aes(x = origin_income, y = total_passengers)) +
  geom_point() +
  labs(x = "Origin Median Income", y = "Total Passengers") +
  ggtitle("Origin Median Income vs Total Passengers")

destincome_vs_passengers_scatter <- origin_dest_summary_income %>%
  filter(dest_cbsa != "39580") %>%
  ggplot(aes(x = destination_income, y = total_passengers)) +
  geom_point() +
  labs(x = "Destination Median Income", y = "Total Passengers") +
  ggtitle("Destination Median Income vs Total Passengers")

originincome_vs_passengers_scatter
destincome_vs_passengers_scatter
```
There doesn't appear to be a huge correlation between origin/destination media income and total passengers. However, there is an outlier with a much lower median household income in Puerto Rico.

## 3. Passenger volume regression
```{r}
#combine income and population census data with flight data, this is JUST FOR RDU
rdu_flights_census <- rdu_flights_with_pop %>%
  left_join(origin_cbsa_income, by = "origin_cbsa") %>%
  left_join(dest_cbsa_income, by = "dest_cbsa")

regression_rdu_flights <- lm(passengers ~ origin_pop + destination_pop + distancemiles + origin_income + destination_income, data = rdu_flights_census)

summary(regression_rdu_flights)
```
```{r}
#performing the same analysis but for ALL FLIGHTS, not just those coming to/from RDU
flights_census <- airport_pairs %>%
  left_join(origin_cbsa_pop, by = "origin_cbsa") %>%
  left_join(dest_cbsa_pop, by = "dest_cbsa") %>%
  left_join(origin_cbsa_income, by = "origin_cbsa") %>%
  left_join(dest_cbsa_income, by = "dest_cbsa")

regression_all_flights <- lm(passengers ~ origin_pop + destination_pop + distancemiles + origin_income + destination_income, data = flights_census)

summary(regression_all_flights)

#suggested by chatgpt to present the regression summary in a pretty format
regression_all_flights_tidy <- tidy(regression_all_flights) %>%
  mutate(
    #the rounding is good for readability
    estimate = round(estimate, 3),
    std.error = round(std.error, 3),
    statistic = round(statistic, 2),
    p.value = round(p.value, 4),
    sig = case_when(
      p.value < 0.001 ~ "***",
      p.value < 0.01 ~ "**",
      p.value < 0.05 ~ "*",
      p.value < 0.1 ~ ".",
      TRUE ~ ""
    )
  ) %>%
  rename(
    "Variable" = term,
    "Estimate" = estimate,
    "Std. Error" = std.error,
    "t-Value" = statistic,
    "p-Value" = p.value,
    "Significance" = sig
  ) %>%
  kable("html", caption = "Regression Model: Predicting Passenger Volumes on All Flights") %>%
  kable_styling(full_width = FALSE) %>%
  save_kable("plots/regression_all_flights_tidy.png", zoom = 2)

regression_all_flights_tidy
```

# NEED TO INTERPRET RESULTS

## 4. Passenger volume prediction
```{r}
#creating the tribble with the new routes we're predicting for, need the same columns as flight, census
new_routes = tribble(
    ~origin_cbsa, ~dest_cbsa, ~origin, ~dest, ~distancemiles, ~origin_pop, ~destination_pop, ~origin_income, ~destination_income,
    "39580", "38900", "RDU", "PDX", 2363, 1449594, 2510529, 96066, 94573,
    "39580", "21340", "RDU", "ELP", 1606, 1449594, 869606, 96066, 58800,
    "39580", "45220", "RDU", "TLH", 496, 1449594, 388298, 96066, 63078,
    "39580", "40900", "RDU", "SMF", 2345, 1449594, 2406563, 96066, 93986,
)

new_routes$forecasted_passengers = predict(regression_all_flights, new_routes)

#used chatgpt to format a "pretty" table
new_routes_table <- new_routes %>%
  mutate(
    route = paste(origin, "â†’", dest),
    #round passengers since half a person can't fly
    forecasted_passengers = round(forecasted_passengers)
  ) %>%
  select(
    route,
    origin_cbsa, dest_cbsa,
    origin_pop, destination_pop,
    origin_income, destination_income,
    distancemiles,
    forecasted_passengers
  ) %>% 
  arrange(desc(forecasted_passengers)) %>% 
  rename(
    "Route" = route,
    "Origin CBSA" = origin_cbsa,
    "Destination CBSA" = dest_cbsa,
    "Origin Population" = origin_pop,
    "Destination Population" = destination_pop,
    "Origin Income" = origin_income,
    "Destination Income" = destination_income,
    "Distance (mi)" = distancemiles,
    "Forecasted Passengers" = forecasted_passengers
  ) %>%  
  kable("html", caption = "Prediction Model: Predicting Passenger Volumes on All Flights") %>%
  kable_styling(full_width = FALSE) %>%
  save_kable("plots/new_routes_prediction.png", zoom = 2)
```

```{r}
#save all the plots & tables to use in my write up
ggsave("plots/originpop_vs_passengers_scatter.png", originpop_vs_passengers_scatter)
ggsave("plots/destpop_vs_passengers_scatter.png", destpop_vs_passengers_scatter)
ggsave("plots/flight_dist_total_passengers.png", flight_dist_total_passengers)
ggsave("plots/originincome_vs_passengers_scatter.png", originincome_vs_passengers_scatter)
ggsave("plots/destincome_vs_passengers_scatter.png", destincome_vs_passengers_scatter)
ggsave("plots/regression_all_flights_tidy.png", regression_all_flights_tidy)
```

### some extra analysis for the report
```{r}
passengers_per_pair<- flights_census %>% 
  filter(passengers > 10000)

summary(passengers_per_pair$passengers)
```